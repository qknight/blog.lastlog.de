[[!summary chatGPT: Nix, the purely functional package manager, has not been widely adopted despite its benefits and needs better IDE integration for increased adoption. Windows support is crucial for Nix to be used as a backend for other package managers.]]
[[!meta date="2023-07-11 14:33"]]
[[!tag nix packagemanager]]

[[!draft]]
[[!img media/nixos-lores.png class="noFancy" style="float: right"]]

https://nixos.wiki/wiki/Language-specific_package_helpers

## motivation

nix, the purely functional package manager, has been around for decades now and is still not widely adopted.

## develop environments

as a rule of thumb here's a list of things that should be true for a nix integration of your IDE:

1. nix integration of your IDE is great, if the compiled binary from the IDE, will not trigger a rebuild when evaluating it again from the shell.

2. the project itself uses a nix expression instead of CMake, Makefiles, package.json, ...

3. dependencies are mapped using derivations (instead of bundling)

this is true for [haskell](https://www.haskell.org/) and [speck](https://spack.io/) but not for most other languages.

## nix PM internals

consider nix be called instead of npm, yarn and so on. explain how the nix wrapper for download works to get reproducibility.

## platform considerations

on windows one can't use nix as on unixes, which makes the tool unsuitable for deep integrations into PMs (nix could directly replace spack/conan and pyenv and at least give huge boosts to all wrappings in place)

## libnix?

- handle /nix/store access
- handle download
- handle .lock file creation



windows support matters because then nix can be used as backend for other package managers:

# fixme

a good IDE integration is a must have for nix to be adopted by the masses.
